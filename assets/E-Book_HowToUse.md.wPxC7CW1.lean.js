import{_ as e}from"./chunks/OpenEditorScript.BOljgYz_.js";import{_ as t,c as a,a2 as l,o as i}from"./chunks/framework.DChxh5P2.js";const r="/HrenactNET/images/E-Book/Download.png",c="/HrenactNET/images/E-Book/Import.png",s="/HrenactNET/images/E-Book/SelectPrefab.png",n="/HrenactNET/images/E-Book/Book1.png",d="/HrenactNET/images/E-Book/Scrpit1.png",p="/HrenactNET/images/E-Book/OpenFile.png",m="/HrenactNET/images/E-Book/Book2.png",k="/HrenactNET/images/E-Book/Scrpit2.png",x=JSON.parse('{"title":"简介","description":"","frontmatter":{"prev":false,"next":{"text":"参考资料","link":"E-Book/Information"}},"headers":[],"relativePath":"E-Book/HowToUse.md","filePath":"E-Book/HowToUse.md","lastUpdated":null}'),h={name:"E-Book/HowToUse.md"};function _(g,o,B,E,T,u){return i(),a("div",null,o[0]||(o[0]=[l('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><p>这是一个用于 VRChat World 的简易电子书插件，具有一定的半自动化功能。</p><p>前往左侧的网址来下载文件：<a href="https://hrenact.booth.pm/items/6306337" target="_blank" rel="noreferrer">https://hrenact.booth.pm/items/6306337</a></p><h1 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h1><h2 id="导入插件" tabindex="-1">导入插件 <a class="header-anchor" href="#导入插件" aria-label="Permalink to &quot;导入插件&quot;">​</a></h2><ol><li>点击页面中下方图示的按钮来下载最新版本；</li></ol><p><img src="'+r+'" alt="Download"></p><ol start="2"><li>解压缩下载好的 *.zip 文件，得到 HrenactsNET_Book.unitypackage 文件；</li><li>打开你的 VRChat World Unity 工程，并确保 VRChat SDK - Worlds 版本为 3.7.4 或更高；</li><li>双击 HrenactsNET_Book.unitypackage 后转到 Unity 窗口，检查无误后导入；</li></ol><p><img src="'+c+'" alt="Import"></p><h2 id="拖入场景" tabindex="-1">拖入场景 <a class="header-anchor" href="#拖入场景" aria-label="Permalink to &quot;拖入场景&quot;">​</a></h2><ol><li>在 Project 窗口中转到路径 <code>Assets/HrenactNET/Book/Prefabs</code>；</li></ol><p><img src="'+s+'" alt="SelectPrefab"></p><ol start="2"><li>选择合适的 *.prefab 预制件，拖入 Hierarchy 中；</li></ol><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p></p><ul><li>名称内带有 <code>Persistence</code> 则意味着支持数据持久化，重新进入地图时将继续显示上次阅读到的页面；</li><li>名称内带有 <code>Dark</code> 则意味着为暗色主题。</li></ul></div><ol start="3"><li>选中刚刚拖入的物体，调整 Inspector 中 Transform 组件的值为合适的值；</li><li>在 Unity 内测试无问题后，上传你的世界。</li></ol><h2 id="添加页面" tabindex="-1">添加页面 <a class="header-anchor" href="#添加页面" aria-label="Permalink to &quot;添加页面&quot;">​</a></h2><ol><li>在 Project 窗口中转到路径 <code>Assets/HrenactNET/Book/Sample Pages</code>，选择合适的页面预制件并拖入 Hierarchy 路径 <code>Book Root/BookUI/Put_Pages_Inside_ME</code> 下；</li></ol><p><img src="'+n+'" alt="Book1"></p><ol start="2"><li>按照页面顺序，依次拖入 <code>Book Root</code> 中的 <code>Book (Script)</code> 或 <code>Book Persistence (Script)</code> 组件的 <code>Book Pages</code> 列表内：<code>Element 0</code> 即对应书本的第一页，<code>Element 1</code> 对应书本的第二页，<code>Element 2</code> 对应书本的第三页，以此类推。</li></ol><p><img src="'+d+'" alt="Scrpit1"></p><h2 id="修改文本" tabindex="-1">修改文本 <a class="header-anchor" href="#修改文本" aria-label="Permalink to &quot;修改文本&quot;">​</a></h2><ol><li>在 Hierarchy 中完整展开物体路径；</li><li>修改 <code>Book Root/BookUI/Book_Title</code> 物体 Text 组件中的文本为书名；</li><li>修改父级 <code>Book Root/BookUI/Put_Pages_Inside_ME</code> 下所有物体 Text 组件中的文本为文章内容。</li></ol><p>如果你拥有 *.txt 格式的文件，你也可以使用 Unity 编辑器拓展脚本来自动填入文本。</p><ol><li>前往 Unity 窗口的顶栏 <code>Tools/HrenactNET/Text Set Tool</code> 来打开界面；</li></ol><p><img src="'+e+'" alt="OpenEditorScript"></p><ol start="2"><li>点击 <code>Load Text from *.txt File (UTF-8)</code> 来打开文件选择页面。读取成功后，<code>Full Text:</code> 下方的输入框将显示文件内的文本；</li></ol><p><img src="'+p+'" alt="OpenFile"></p><ol start="3"><li>按照你在 <code>Book Pages</code> 中设定的顺序，依次拖入 <code>Text Components</code> 列表中；</li></ol><p><img src="'+m+'" alt="Book2"></p><p><img src="'+k+'" alt="Scrpit2"></p><ol start="4"><li>点击 <code>Start Fill Text</code> 按钮，脚本将按照 <code>Text Components</code> 列表中的顺序自动填入文本。</li></ol><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>如果你使用的是 <code>Dark</code> 暗色主题预制件，你也可以勾选 <code>Is Set Texts Color</code> 复选框，脚本在自动填充文本时也会自动设定文本颜色为合适的颜色。</p></div>',32)]))}const P=t(h,[["render",_]]);export{x as __pageData,P as default};
